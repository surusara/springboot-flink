/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.FlinkNettingApplication;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Trade extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1043832517487456485L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Trade\",\"namespace\":\"com.example.FlinkNettingApplication\",\"fields\":[{\"name\":\"client\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"buySellDirection\",\"type\":\"string\"},{\"name\":\"settlementDate\",\"type\":\"string\"},{\"name\":\"consideration\",\"type\":\"double\"},{\"name\":\"eventTime\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}},{\"name\":\"operation\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
  }

  private static final BinaryMessageEncoder<Trade> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Trade> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Trade> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Trade> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Trade> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Trade to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Trade from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Trade instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Trade fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence client;
  private java.lang.CharSequence currency;
  private java.lang.CharSequence buySellDirection;
  private java.lang.CharSequence settlementDate;
  private double consideration;
  private java.time.Instant eventTime;
  private java.lang.CharSequence operation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Trade() {}

  /**
   * All-args constructor.
   * @param client The new value for client
   * @param currency The new value for currency
   * @param buySellDirection The new value for buySellDirection
   * @param settlementDate The new value for settlementDate
   * @param consideration The new value for consideration
   * @param eventTime The new value for eventTime
   * @param operation The new value for operation
   */
  public Trade(java.lang.CharSequence client, java.lang.CharSequence currency, java.lang.CharSequence buySellDirection, java.lang.CharSequence settlementDate, java.lang.Double consideration, java.time.Instant eventTime, java.lang.CharSequence operation) {
    this.client = client;
    this.currency = currency;
    this.buySellDirection = buySellDirection;
    this.settlementDate = settlementDate;
    this.consideration = consideration;
    this.eventTime = eventTime.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
    this.operation = operation;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return client;
    case 1: return currency;
    case 2: return buySellDirection;
    case 3: return settlementDate;
    case 4: return consideration;
    case 5: return eventTime;
    case 6: return operation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: client = (java.lang.CharSequence)value$; break;
    case 1: currency = (java.lang.CharSequence)value$; break;
    case 2: buySellDirection = (java.lang.CharSequence)value$; break;
    case 3: settlementDate = (java.lang.CharSequence)value$; break;
    case 4: consideration = (java.lang.Double)value$; break;
    case 5: eventTime = (java.time.Instant)value$; break;
    case 6: operation = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'client' field.
   * @return The value of the 'client' field.
   */
  public java.lang.CharSequence getClient() {
    return client;
  }


  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(java.lang.CharSequence value) {
    this.client = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'buySellDirection' field.
   * @return The value of the 'buySellDirection' field.
   */
  public java.lang.CharSequence getBuySellDirection() {
    return buySellDirection;
  }


  /**
   * Sets the value of the 'buySellDirection' field.
   * @param value the value to set.
   */
  public void setBuySellDirection(java.lang.CharSequence value) {
    this.buySellDirection = value;
  }

  /**
   * Gets the value of the 'settlementDate' field.
   * @return The value of the 'settlementDate' field.
   */
  public java.lang.CharSequence getSettlementDate() {
    return settlementDate;
  }


  /**
   * Sets the value of the 'settlementDate' field.
   * @param value the value to set.
   */
  public void setSettlementDate(java.lang.CharSequence value) {
    this.settlementDate = value;
  }

  /**
   * Gets the value of the 'consideration' field.
   * @return The value of the 'consideration' field.
   */
  public double getConsideration() {
    return consideration;
  }


  /**
   * Sets the value of the 'consideration' field.
   * @param value the value to set.
   */
  public void setConsideration(double value) {
    this.consideration = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public java.time.Instant getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(java.time.Instant value) {
    this.eventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Gets the value of the 'operation' field.
   * @return The value of the 'operation' field.
   */
  public java.lang.CharSequence getOperation() {
    return operation;
  }


  /**
   * Sets the value of the 'operation' field.
   * @param value the value to set.
   */
  public void setOperation(java.lang.CharSequence value) {
    this.operation = value;
  }

  /**
   * Creates a new Trade RecordBuilder.
   * @return A new Trade RecordBuilder
   */
  public static com.example.FlinkNettingApplication.Trade.Builder newBuilder() {
    return new com.example.FlinkNettingApplication.Trade.Builder();
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.example.FlinkNettingApplication.Trade.Builder newBuilder(com.example.FlinkNettingApplication.Trade.Builder other) {
    if (other == null) {
      return new com.example.FlinkNettingApplication.Trade.Builder();
    } else {
      return new com.example.FlinkNettingApplication.Trade.Builder(other);
    }
  }

  /**
   * Creates a new Trade RecordBuilder by copying an existing Trade instance.
   * @param other The existing instance to copy.
   * @return A new Trade RecordBuilder
   */
  public static com.example.FlinkNettingApplication.Trade.Builder newBuilder(com.example.FlinkNettingApplication.Trade other) {
    if (other == null) {
      return new com.example.FlinkNettingApplication.Trade.Builder();
    } else {
      return new com.example.FlinkNettingApplication.Trade.Builder(other);
    }
  }

  /**
   * RecordBuilder for Trade instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Trade>
    implements org.apache.avro.data.RecordBuilder<Trade> {

    private java.lang.CharSequence client;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence buySellDirection;
    private java.lang.CharSequence settlementDate;
    private double consideration;
    private java.time.Instant eventTime;
    private java.lang.CharSequence operation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.FlinkNettingApplication.Trade.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.client)) {
        this.client = data().deepCopy(fields()[0].schema(), other.client);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.buySellDirection)) {
        this.buySellDirection = data().deepCopy(fields()[2].schema(), other.buySellDirection);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[3].schema(), other.settlementDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.consideration)) {
        this.consideration = data().deepCopy(fields()[4].schema(), other.consideration);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[5].schema(), other.eventTime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.operation)) {
        this.operation = data().deepCopy(fields()[6].schema(), other.operation);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Trade instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.FlinkNettingApplication.Trade other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.client)) {
        this.client = data().deepCopy(fields()[0].schema(), other.client);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.buySellDirection)) {
        this.buySellDirection = data().deepCopy(fields()[2].schema(), other.buySellDirection);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[3].schema(), other.settlementDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.consideration)) {
        this.consideration = data().deepCopy(fields()[4].schema(), other.consideration);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[5].schema(), other.eventTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.operation)) {
        this.operation = data().deepCopy(fields()[6].schema(), other.operation);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'client' field.
      * @return The value.
      */
    public java.lang.CharSequence getClient() {
      return client;
    }


    /**
      * Sets the value of the 'client' field.
      * @param value The value of 'client'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setClient(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.client = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'client' field has been set.
      * @return True if the 'client' field has been set, false otherwise.
      */
    public boolean hasClient() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'client' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearClient() {
      client = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'buySellDirection' field.
      * @return The value.
      */
    public java.lang.CharSequence getBuySellDirection() {
      return buySellDirection;
    }


    /**
      * Sets the value of the 'buySellDirection' field.
      * @param value The value of 'buySellDirection'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setBuySellDirection(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.buySellDirection = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'buySellDirection' field has been set.
      * @return True if the 'buySellDirection' field has been set, false otherwise.
      */
    public boolean hasBuySellDirection() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'buySellDirection' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearBuySellDirection() {
      buySellDirection = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlementDate() {
      return settlementDate;
    }


    /**
      * Sets the value of the 'settlementDate' field.
      * @param value The value of 'settlementDate'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setSettlementDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.settlementDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementDate' field has been set.
      * @return True if the 'settlementDate' field has been set, false otherwise.
      */
    public boolean hasSettlementDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'settlementDate' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearSettlementDate() {
      settlementDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'consideration' field.
      * @return The value.
      */
    public double getConsideration() {
      return consideration;
    }


    /**
      * Sets the value of the 'consideration' field.
      * @param value The value of 'consideration'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setConsideration(double value) {
      validate(fields()[4], value);
      this.consideration = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'consideration' field has been set.
      * @return True if the 'consideration' field has been set, false otherwise.
      */
    public boolean hasConsideration() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'consideration' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearConsideration() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public java.time.Instant getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setEventTime(java.time.Instant value) {
      validate(fields()[5], value);
      this.eventTime = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearEventTime() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'operation' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperation() {
      return operation;
    }


    /**
      * Sets the value of the 'operation' field.
      * @param value The value of 'operation'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder setOperation(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.operation = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'operation' field has been set.
      * @return True if the 'operation' field has been set, false otherwise.
      */
    public boolean hasOperation() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'operation' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.Trade.Builder clearOperation() {
      operation = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Trade build() {
      try {
        Trade record = new Trade();
        record.client = fieldSetFlags()[0] ? this.client : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.buySellDirection = fieldSetFlags()[2] ? this.buySellDirection : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.settlementDate = fieldSetFlags()[3] ? this.settlementDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.consideration = fieldSetFlags()[4] ? this.consideration : (java.lang.Double) defaultValue(fields()[4]);
        record.eventTime = fieldSetFlags()[5] ? this.eventTime : (java.time.Instant) defaultValue(fields()[5]);
        record.operation = fieldSetFlags()[6] ? this.operation : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Trade>
    WRITER$ = (org.apache.avro.io.DatumWriter<Trade>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Trade>
    READER$ = (org.apache.avro.io.DatumReader<Trade>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










