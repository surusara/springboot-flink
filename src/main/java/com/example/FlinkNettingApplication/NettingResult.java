/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.FlinkNettingApplication;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class NettingResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -916582986176115549L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"NettingResult\",\"namespace\":\"com.example.FlinkNettingApplication\",\"fields\":[{\"name\":\"client\",\"type\":\"string\"},{\"name\":\"currency\",\"type\":\"string\"},{\"name\":\"buySellDirection\",\"type\":\"string\"},{\"name\":\"settlementDate\",\"type\":\"string\"},{\"name\":\"netConsideration\",\"type\":\"double\"},{\"name\":\"paymentId\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NettingResult> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NettingResult> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<NettingResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<NettingResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<NettingResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this NettingResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a NettingResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a NettingResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static NettingResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence client;
  private java.lang.CharSequence currency;
  private java.lang.CharSequence buySellDirection;
  private java.lang.CharSequence settlementDate;
  private double netConsideration;
  private java.lang.CharSequence paymentId;
  private java.lang.CharSequence state;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public NettingResult() {}

  /**
   * All-args constructor.
   * @param client The new value for client
   * @param currency The new value for currency
   * @param buySellDirection The new value for buySellDirection
   * @param settlementDate The new value for settlementDate
   * @param netConsideration The new value for netConsideration
   * @param paymentId The new value for paymentId
   * @param state The new value for state
   */
  public NettingResult(java.lang.CharSequence client, java.lang.CharSequence currency, java.lang.CharSequence buySellDirection, java.lang.CharSequence settlementDate, java.lang.Double netConsideration, java.lang.CharSequence paymentId, java.lang.CharSequence state) {
    this.client = client;
    this.currency = currency;
    this.buySellDirection = buySellDirection;
    this.settlementDate = settlementDate;
    this.netConsideration = netConsideration;
    this.paymentId = paymentId;
    this.state = state;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return client;
    case 1: return currency;
    case 2: return buySellDirection;
    case 3: return settlementDate;
    case 4: return netConsideration;
    case 5: return paymentId;
    case 6: return state;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: client = (java.lang.CharSequence)value$; break;
    case 1: currency = (java.lang.CharSequence)value$; break;
    case 2: buySellDirection = (java.lang.CharSequence)value$; break;
    case 3: settlementDate = (java.lang.CharSequence)value$; break;
    case 4: netConsideration = (java.lang.Double)value$; break;
    case 5: paymentId = (java.lang.CharSequence)value$; break;
    case 6: state = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'client' field.
   * @return The value of the 'client' field.
   */
  public java.lang.CharSequence getClient() {
    return client;
  }


  /**
   * Sets the value of the 'client' field.
   * @param value the value to set.
   */
  public void setClient(java.lang.CharSequence value) {
    this.client = value;
  }

  /**
   * Gets the value of the 'currency' field.
   * @return The value of the 'currency' field.
   */
  public java.lang.CharSequence getCurrency() {
    return currency;
  }


  /**
   * Sets the value of the 'currency' field.
   * @param value the value to set.
   */
  public void setCurrency(java.lang.CharSequence value) {
    this.currency = value;
  }

  /**
   * Gets the value of the 'buySellDirection' field.
   * @return The value of the 'buySellDirection' field.
   */
  public java.lang.CharSequence getBuySellDirection() {
    return buySellDirection;
  }


  /**
   * Sets the value of the 'buySellDirection' field.
   * @param value the value to set.
   */
  public void setBuySellDirection(java.lang.CharSequence value) {
    this.buySellDirection = value;
  }

  /**
   * Gets the value of the 'settlementDate' field.
   * @return The value of the 'settlementDate' field.
   */
  public java.lang.CharSequence getSettlementDate() {
    return settlementDate;
  }


  /**
   * Sets the value of the 'settlementDate' field.
   * @param value the value to set.
   */
  public void setSettlementDate(java.lang.CharSequence value) {
    this.settlementDate = value;
  }

  /**
   * Gets the value of the 'netConsideration' field.
   * @return The value of the 'netConsideration' field.
   */
  public double getNetConsideration() {
    return netConsideration;
  }


  /**
   * Sets the value of the 'netConsideration' field.
   * @param value the value to set.
   */
  public void setNetConsideration(double value) {
    this.netConsideration = value;
  }

  /**
   * Gets the value of the 'paymentId' field.
   * @return The value of the 'paymentId' field.
   */
  public java.lang.CharSequence getPaymentId() {
    return paymentId;
  }


  /**
   * Sets the value of the 'paymentId' field.
   * @param value the value to set.
   */
  public void setPaymentId(java.lang.CharSequence value) {
    this.paymentId = value;
  }

  /**
   * Gets the value of the 'state' field.
   * @return The value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }


  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Creates a new NettingResult RecordBuilder.
   * @return A new NettingResult RecordBuilder
   */
  public static com.example.FlinkNettingApplication.NettingResult.Builder newBuilder() {
    return new com.example.FlinkNettingApplication.NettingResult.Builder();
  }

  /**
   * Creates a new NettingResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new NettingResult RecordBuilder
   */
  public static com.example.FlinkNettingApplication.NettingResult.Builder newBuilder(com.example.FlinkNettingApplication.NettingResult.Builder other) {
    if (other == null) {
      return new com.example.FlinkNettingApplication.NettingResult.Builder();
    } else {
      return new com.example.FlinkNettingApplication.NettingResult.Builder(other);
    }
  }

  /**
   * Creates a new NettingResult RecordBuilder by copying an existing NettingResult instance.
   * @param other The existing instance to copy.
   * @return A new NettingResult RecordBuilder
   */
  public static com.example.FlinkNettingApplication.NettingResult.Builder newBuilder(com.example.FlinkNettingApplication.NettingResult other) {
    if (other == null) {
      return new com.example.FlinkNettingApplication.NettingResult.Builder();
    } else {
      return new com.example.FlinkNettingApplication.NettingResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for NettingResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<NettingResult>
    implements org.apache.avro.data.RecordBuilder<NettingResult> {

    private java.lang.CharSequence client;
    private java.lang.CharSequence currency;
    private java.lang.CharSequence buySellDirection;
    private java.lang.CharSequence settlementDate;
    private double netConsideration;
    private java.lang.CharSequence paymentId;
    private java.lang.CharSequence state;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.FlinkNettingApplication.NettingResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.client)) {
        this.client = data().deepCopy(fields()[0].schema(), other.client);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.buySellDirection)) {
        this.buySellDirection = data().deepCopy(fields()[2].schema(), other.buySellDirection);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[3].schema(), other.settlementDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.netConsideration)) {
        this.netConsideration = data().deepCopy(fields()[4].schema(), other.netConsideration);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[5].schema(), other.paymentId);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing NettingResult instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.FlinkNettingApplication.NettingResult other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.client)) {
        this.client = data().deepCopy(fields()[0].schema(), other.client);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.currency)) {
        this.currency = data().deepCopy(fields()[1].schema(), other.currency);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.buySellDirection)) {
        this.buySellDirection = data().deepCopy(fields()[2].schema(), other.buySellDirection);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.settlementDate)) {
        this.settlementDate = data().deepCopy(fields()[3].schema(), other.settlementDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.netConsideration)) {
        this.netConsideration = data().deepCopy(fields()[4].schema(), other.netConsideration);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentId)) {
        this.paymentId = data().deepCopy(fields()[5].schema(), other.paymentId);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.state)) {
        this.state = data().deepCopy(fields()[6].schema(), other.state);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'client' field.
      * @return The value.
      */
    public java.lang.CharSequence getClient() {
      return client;
    }


    /**
      * Sets the value of the 'client' field.
      * @param value The value of 'client'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setClient(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.client = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'client' field has been set.
      * @return True if the 'client' field has been set, false otherwise.
      */
    public boolean hasClient() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'client' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearClient() {
      client = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'currency' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrency() {
      return currency;
    }


    /**
      * Sets the value of the 'currency' field.
      * @param value The value of 'currency'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setCurrency(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.currency = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'currency' field has been set.
      * @return True if the 'currency' field has been set, false otherwise.
      */
    public boolean hasCurrency() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'currency' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearCurrency() {
      currency = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'buySellDirection' field.
      * @return The value.
      */
    public java.lang.CharSequence getBuySellDirection() {
      return buySellDirection;
    }


    /**
      * Sets the value of the 'buySellDirection' field.
      * @param value The value of 'buySellDirection'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setBuySellDirection(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.buySellDirection = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'buySellDirection' field has been set.
      * @return True if the 'buySellDirection' field has been set, false otherwise.
      */
    public boolean hasBuySellDirection() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'buySellDirection' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearBuySellDirection() {
      buySellDirection = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'settlementDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getSettlementDate() {
      return settlementDate;
    }


    /**
      * Sets the value of the 'settlementDate' field.
      * @param value The value of 'settlementDate'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setSettlementDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.settlementDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'settlementDate' field has been set.
      * @return True if the 'settlementDate' field has been set, false otherwise.
      */
    public boolean hasSettlementDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'settlementDate' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearSettlementDate() {
      settlementDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'netConsideration' field.
      * @return The value.
      */
    public double getNetConsideration() {
      return netConsideration;
    }


    /**
      * Sets the value of the 'netConsideration' field.
      * @param value The value of 'netConsideration'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setNetConsideration(double value) {
      validate(fields()[4], value);
      this.netConsideration = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'netConsideration' field has been set.
      * @return True if the 'netConsideration' field has been set, false otherwise.
      */
    public boolean hasNetConsideration() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'netConsideration' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearNetConsideration() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPaymentId() {
      return paymentId;
    }


    /**
      * Sets the value of the 'paymentId' field.
      * @param value The value of 'paymentId'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setPaymentId(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.paymentId = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentId' field has been set.
      * @return True if the 'paymentId' field has been set, false otherwise.
      */
    public boolean hasPaymentId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentId' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearPaymentId() {
      paymentId = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'state' field.
      * @return The value.
      */
    public java.lang.CharSequence getState() {
      return state;
    }


    /**
      * Sets the value of the 'state' field.
      * @param value The value of 'state'.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder setState(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.state = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'state' field has been set.
      * @return True if the 'state' field has been set, false otherwise.
      */
    public boolean hasState() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'state' field.
      * @return This builder.
      */
    public com.example.FlinkNettingApplication.NettingResult.Builder clearState() {
      state = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NettingResult build() {
      try {
        NettingResult record = new NettingResult();
        record.client = fieldSetFlags()[0] ? this.client : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.currency = fieldSetFlags()[1] ? this.currency : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.buySellDirection = fieldSetFlags()[2] ? this.buySellDirection : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.settlementDate = fieldSetFlags()[3] ? this.settlementDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.netConsideration = fieldSetFlags()[4] ? this.netConsideration : (java.lang.Double) defaultValue(fields()[4]);
        record.paymentId = fieldSetFlags()[5] ? this.paymentId : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.state = fieldSetFlags()[6] ? this.state : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NettingResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<NettingResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NettingResult>
    READER$ = (org.apache.avro.io.DatumReader<NettingResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.client);

    out.writeString(this.currency);

    out.writeString(this.buySellDirection);

    out.writeString(this.settlementDate);

    out.writeDouble(this.netConsideration);

    out.writeString(this.paymentId);

    out.writeString(this.state);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.client = in.readString(this.client instanceof Utf8 ? (Utf8)this.client : null);

      this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);

      this.buySellDirection = in.readString(this.buySellDirection instanceof Utf8 ? (Utf8)this.buySellDirection : null);

      this.settlementDate = in.readString(this.settlementDate instanceof Utf8 ? (Utf8)this.settlementDate : null);

      this.netConsideration = in.readDouble();

      this.paymentId = in.readString(this.paymentId instanceof Utf8 ? (Utf8)this.paymentId : null);

      this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.client = in.readString(this.client instanceof Utf8 ? (Utf8)this.client : null);
          break;

        case 1:
          this.currency = in.readString(this.currency instanceof Utf8 ? (Utf8)this.currency : null);
          break;

        case 2:
          this.buySellDirection = in.readString(this.buySellDirection instanceof Utf8 ? (Utf8)this.buySellDirection : null);
          break;

        case 3:
          this.settlementDate = in.readString(this.settlementDate instanceof Utf8 ? (Utf8)this.settlementDate : null);
          break;

        case 4:
          this.netConsideration = in.readDouble();
          break;

        case 5:
          this.paymentId = in.readString(this.paymentId instanceof Utf8 ? (Utf8)this.paymentId : null);
          break;

        case 6:
          this.state = in.readString(this.state instanceof Utf8 ? (Utf8)this.state : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










